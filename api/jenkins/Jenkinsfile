#!groovy
// Pipeline
pipeline {
    agent any


    environment {
        // variáveis úteis
        def repoPWD = ""
        def repoDevops = ""
        def shortCommit = ""
        def varVersion = ""

        // mensagem do jenkins
        MSG_JENKINS = "Teste de conexão"

        // configuração do repositório
        REPO_NAME = "vougth-api-events"
        REPO_URL = "git@github.com:Vought-Organization/vougth-api-events.git"
        REPO_BRANCH = "main"

        // configuração do docker
//         DOCKER_REPO
        USERNAME_DOCKER = "vought"
        PASSWORD_DOCKER = "Vought@123"

        // configuração do IP do SonarQube
        SONAR_PROJECTKEY = "backend"
        SONAR_ORG = "vought"
        SONAR_URL = "34.196.201.94:9000"
        SONAR_LOGIN = "squ_f7795b286ea9579888a0049f626cede2d00d2fb9"

        // configuração para acesso à AWS
        SSH_KEY = "ssh -i '/home/jenkins/keys/backend.pem' ubuntu@ec2-54-159-231-168.compute-1.amazonaws.com"
    }

    stages{
        stage('Teste de conexão'){
            steps{
                script{
                    echo "teste bem sucedido"
                }
            }
        }

        stage("Clonagem do repositório"){
            steps{
                script{
                    echo "Início da clonagem do repositório"
                    def functions = load '../src/main/java/libs/functions/Functions.groovy'
                }
                script{
                    sh "sudo git clone -b ${REPO_BRANCH} ${REPO_URL} && cd ${REPO_NAME} && git checkout ${REPO_BRANCH}"
                    repoPWD = functions.cloneAndCheckout("${REPO_URL}","${REPO_NAME}","${REPO_BRANCH}")
                    shortCommit = functions.getShortCommitHash("${repoPWD}")
                    echo "Commit Hash: ${repoPWD}"
                }
            }
        }

        stage("Definição de versão do maven"){
            steps{
                dir(repoPWD){
                    script{
                        echo "Início da definição da versão do Maven"
                        sh "mvn versions:set -DnewVersion=${REPO_NAME}.${REPO_BRANCH}.${env.BUILD_NUMBER} && mvn versions:commit -DprocessAllModules"
                        echo "Nova versão: ${REPO_NAME}.${REPO_BRANCH}.${env.BUILD_NUMBER}"
                        varVersion = "${REPO_NAME}.${REPO_BRANCH}.${env.BUILD_NUMBER}"
                    }
                }
            }
        }

        stage("Build do projeto"){
            steps{
                dir(repoPWD){
                    script{
                        echo "Início do build do projeto via Maven"
                        echo "${shortCommit}"
                        sh "mvn clean install"
                    }
                }
            }
        }

        stage('Análise de qualidade'){
            steps{
                dir(repoPWD){
                    script{
                        echo "Início da análise da qualidade do código via SonarQube"
                        sh 'docker run -d --name sonarqube -p 9000:9000 -p 9092:9092 sonarqube:9.9.1-community'
                        sh 'mvn sonar:sonar -Dsonar.projectKey=${SONAR_PROJECTKEY} -Dsonar.organization=${SONAR_ORG} -Dsonar.host.url=${SONAR_URL} -Dsonar.login=${SONAR_LOGIN}'
                        sh 'docker stop sonarqube'
                    }
                }
            }
        }

//         stage('Configuração e envio da imagem do Docker'){
//             steps{
//                 dir(repoPWD){
//                     script{
//                         echo "Início da configuração da imagem do projeto"
//                         sh "docker build -t ${DOCKER_REPO}:${varVersion} ."
//                         sh "docker login -u $USERNAME_DOCKER -p $PASSWORD_DOCKER"
//                         sh "docker push ${DOCKER_REPO}:${varVersion}"
//                     }
//                 }
//             }
//         }
    }
}
